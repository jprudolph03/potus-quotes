{"version":3,"sources":["PotusQuoteBox.js","RandoQuote.js","App.js","serviceWorker.js","index.js"],"names":["PotusQuoteBox","className","this","props","quote","date","Component","RandoQuote","state","data","axiosCall","bind","axios","then","response","setState","catch","error","console","log","value","appeared_at","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sRAaeA,E,uKATX,OACE,6BACE,uBAAGC,UAAU,aAAaC,KAAKC,MAAMC,OACrC,4CAAiB,2BAAIF,KAAKC,MAAME,Y,GALZC,a,iBC4DbC,E,kDAhDb,WAAYJ,GAAO,IAAD,8BAChB,cAAMA,IACDK,MAAQ,CACXC,KAAM,IAER,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALD,E,wDAQN,IAAD,OACTC,IAAM,CACF,OAAS,MACT,IAAM,kEACN,QAAU,CACV,eAAe,2BACf,kBAAkB,6CAClB,iBAAiB,qDACjB,OAAS,0BAGRC,MAAK,SAACC,GACL,IAAIL,EAAOK,EAASL,KACpB,EAAKM,SAAS,CAACN,YAEhBO,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,0CAKlBf,KAAKQ,c,+BAKL,OACE,yBAAKT,UAAU,cACb,4CACA,kBAAC,EAAD,CACEG,MAAOF,KAAKM,MAAMC,KAAKW,MACvBf,KAAMH,KAAKM,MAAMC,KAAKY,cAE1B,4BAAQC,QAASpB,KAAKQ,WAAtB,qB,GA1CmBJ,a,MCDViB,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCKcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,c","file":"static/js/main.785d3b03.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass PotusQuoteBox extends Component{\n  render(){\n    return(\n      <div>\n        <p className=\"quoteText\">{this.props.quote}</p>\n        <p>Added To API: <i>{this.props.date}</i></p>\n      </div>\n    )\n  }\n}\n\nexport default PotusQuoteBox;\n","import React, {Component} from 'react';\n\n\nimport PotusQuoteBox from './PotusQuoteBox';\n\n\n\nimport axios from 'axios';\n\n\n\n\n\nclass RandoQuote extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      data: []\n    }\n    this.axiosCall = this.axiosCall.bind(this);\n  }\n\n  axiosCall(){\n    axios({\n        \"method\":\"GET\",\n        \"url\":\"https://matchilling-tronald-dump-v1.p.rapidapi.com/random/quote\",\n        \"headers\":{\n        \"content-type\":\"application/octet-stream\",\n        \"x-rapidapi-host\":\"matchilling-tronald-dump-v1.p.rapidapi.com\",\n        \"x-rapidapi-key\":\"b07eca3e36mshcd899dde1f818ecp12e73cjsn772d397f9ee9\",\n        \"accept\":\"application/hal+json\"\n        }\n        })\n        .then((response)=>{\n          let data = response.data;\n          this.setState({data})\n        })\n        .catch((error)=>{\n          console.log(error)\n        })\n  }\n\n  componentDidMount(){\n    this.axiosCall();\n  }\n\n\n  render(){\n    return(\n      <div className=\"RandoQuote\">\n        <h1>POTUS Quotes</h1>\n        <PotusQuoteBox\n          quote={this.state.data.value}\n          date={this.state.data.appeared_at}\n        />\n      <button onClick={this.axiosCall}>Get Another!</button>\n      \n      </div>\n    )\n  }\n}\n\nexport default RandoQuote;\n","import React from 'react';\nimport RandoQuote from './RandoQuote';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RandoQuote />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}